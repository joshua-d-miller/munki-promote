#!/usr/local/bin/psupython
'''
------------------------
  Penn State MacAdmins
------------------------
Performs the following:
  - Reads in configuration from JSON file
  and performs automatic promotion from specified
  catalog to specified catalog
 Notes:
  - Example
    - Firefox (Testing) to (Production)
-------------------------------------
   Joshua D. Miller - josh@psu.edu
   The Pennsylvania State University

   Last Update: August 20, 2021
   Python Version Tested: 3.8.0
-------------------------------------
'''
from __future__ import print_function
import json
import os
import plistlib
import subprocess
import sys
from datetime import datetime, timedelta


def main():
    '''This function will read in the configuration
    sections defined in munkipromote.json'''
    # Read Config File
    # Determine the path of the script
    script_path = os.path.realpath(os.path.dirname(sys.argv[0]))
    # Set the location of the munkipromote.conf file
    conf_file = '{0:}/munkipromote.json'.format(script_path)
    # Attempt to read the config file
    try:
        with open(conf_file, 'rb') as json_config:
            config = json.load(json_config)
    except Exception as error:
        print(error)
        sys.exit(1)
    # Read Munki Repo location
    munki_repo = config["main"]["REPO"]
    pkgsinfo = '{0:}/pkgsinfo'.format(munki_repo)
    # Set up notification varaible to output to Teams
    notification_text = ""
    # Check that webhook is configured
    webhook = config["main"]["TEAMS_WEBHOOK"]
    # Take the current date
    start_time = datetime.now().strftime('%B %d, %Y %I:%M %p')
    # Parse Configuration file for different catalogs and
    # their applications to promote.
    for promotion_group in config["promotions"]:
        config_options = dict()
        #### Read applications to move to specified catalog
        try:
            config_options[0] = promotion_group['APPS']
        except:
            continue
        #### Read last modified time limit (Days)
        try:
            config_options[1] = int(promotion_group["TIME"])
        except:
            continue
        #### Read the catalog to promote from
        try:
            config_options[2] = promotion_group["PROMOTE_FROM"]
        except:
            continue
        #### Read the catalog to promote to
        try:
            config_options[3] = promotion_group["PROMOTE_TO"]
        except:
            continue
        #### Perform promotion of desired applications
        try:
            notification_text += promote_apps(
                pkgsinfo, promotion_group["TITLE"], config_options)
        except:
            continue
    print(notification_text)
    if webhook:
        # Build Microsoft Teams Notification
        promote_teams_notification = {
            'text' : notification_text,
            'textformat' : 'markdown',
            'title': 'Munki-Promote Run - {0:}'.format(start_time)
        }
        # Send notification
        subprocess.check_call(
            ['/usr/bin/curl', '-H', 'Content-Type: application/json',
             '-d', json.dumps(promote_teams_notification), webhook],
            stderr=subprocess.PIPE)
    makecatalogspath = config["main"]["MAKECATALOGS"]
    '''if not makecatalogspath:
        print("Using default location for makecatalogs....")
        makecatalogspath = '/usr/local/munki/makecatalogs'
    makecatalogs(makecatalogspath, munki_repo)'''


def promote_apps(repo, group, config_options):
    '''This function will perform promotions of
    the applications from one group to another'''
    # Create list to append updated pkginfo/plist apps
    updated_apps = []
    # Working Files will handle or current file
    # timestamp and plist
    working_files = dict()
    # os_walker will handle our os.walk
    # for dirname, dirnames in filenames:
    #  for filename in filenames:
    os_walker = dict()
    # Check pkginfo and plist files in Munki Repo and change their catalog
    # based of modification time and catalog selected.
    # Begin searching through the pkginfo directory
    for os_walker[0], os_walker[1], os_walker[2] in os.walk(repo):
        for os_walker[3] in os_walker[2]:
            # Omit hidden files
            if os_walker[3].startswith("."):
                continue
            # Capture Current file
            working_file = os.path.join(os_walker[0], os_walker[3])
            # Read PLIST file
            with open(working_file, 'rb') as pl:
                work_plist = plistlib.load(pl)
            # Get last modified time of the file
            getmtime = os.path.getmtime(working_file)
            modifytime = datetime.fromtimestamp(getmtime)
            # Get current time of script run
            now = datetime.now()
            # Change time from config into a date time
            # First Convert the days to a timestamp
            days_from_config = timedelta(days=config_options[1])
            # Now set the desired file has not been modified for x days
            desired_last_modified_time = now - days_from_config
            # Check if the file has not been modified
            # for time specified in config
            if (config_options[2] in work_plist['catalogs'] and
                modifytime < desired_last_modified_time and
                    work_plist['name'] in config_options[0]):
                try:
                    # Update Catalog
                    work_plist['catalogs'] = [config_options[3]]
                    # Add to list of updated applications
                    updated_apps.append(list([work_plist['name'],
                                              work_plist['version']]))
                    # Write the file
                    with open(working_file, 'wb') as plist_to_write:
                        plistlib.dump(work_plist, plist_to_write)
                except Exception as error:
                    print(error)
                    print("Could not update pkginfo for {0:}"
                          .format(working_files[0]))
                    continue
    # Print output of changes made
    prepare_notification_text = ""
    if not updated_apps:
        print("No items defined in {0:} were promoted to the {1:} "
              "catalog from the {2:} catalog..."
              .format(group, config_options[3], config_options[2]))
        prepare_notification_text += (
            "No items defined in {0:} were promoted to the {1:} "
            "catalog from the {2:} catalog...   \n"
            .format(group, config_options[3], config_options[2]))
    else:
        # Print the applications that were updated for each catalog
        print("The following items defined in {0:} were promoted "
              "to the {1:} catalog from the {2:} catalog... \n"
              .format(group, config_options[3], config_options[2]))
        prepare_notification_text += (
            "The following items defined in {0:} were promoted "
            "to the {1:} catalog from the {2:} catalog...   \n"
            .format(group, config_options[3], config_options[2]))
        space = 50
        print("{0:{space}}{1:}\n{2:{space}}{3:}"
              .format("Name", "Version", "----", "-------", space=space))
        for name, version in updated_apps:
            print("{0:{space}}{1:}".format(name, version, space=space))
            prepare_notification_text += (" â€¢ {0:} - {1:}   \n".format(
                name, version))
        print()

    return prepare_notification_text

def makecatalogs(makecatalogspath, munki_repo):
    '''Performs Munki makecatalogs
    function after all promotions have
    been completed.'''
    try:
        # Update the Munki Catalogs
        print("Updating catalogs....")
        # Suppress the output of makecatalogs
        subprocess.check_output(
            [makecatalogspath, munki_repo],stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
    except Exception as error:
        print("Could not update the Munki catalogs.  Please run makecatalogs")
        print(error)


if __name__ == '__main__':
    main()
